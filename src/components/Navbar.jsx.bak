import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import { useTheme } from '../context/ThemeContext';

const NavContainer = styled.nav`
  position: fixed;
  top: 2rem;
  right: 2rem;
  z-index: 1000;
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  background: transparent;
  transition: all var(--duration-medium) var(--easing-standard);
`;

const MenuButton = styled(motion.button)`
  display: flex;
  justify-content: center;
  align-items: center;
  background: ${({ theme }) => theme.colors.navBackground};
  border: ${({ theme }) => theme.isDarkMode ?
    `1px solid ${theme.colors.primary}` :
    'none'
  };
  border-radius: ${({ theme }) => theme.isDarkMode ? '50%' : '16px'};
  cursor: pointer;
  color: ${({ theme }) => theme.colors.primary};
  width: 50px;
  height: 50px;
  position: relative;
  z-index: 1000;
  backdrop-filter: blur(10px);
  box-shadow: ${({ theme }) => theme.isDarkMode ?
    `0 0 20px ${theme.colors.primary}33` :
    'var(--elevation-1)'
  };
  transition: all var(--duration-medium) var(--easing-standard);
  
  &:hover {
    background: ${({ theme }) => theme.isDarkMode ?
      theme.colors.cardBackground :
      `${theme.colors.primary}10`
    };
    box-shadow: ${({ theme }) => theme.isDarkMode ?
      `0 0 30px ${theme.colors.primary}4D` :
      'var(--elevation-2)'
    };
    transform: scale(1.05);
  }

  &:active {
    transform: scale(0.95);
    box-shadow: ${({ theme }) => theme.isDarkMode ?
      `0 0 15px ${theme.colors.primary}33` :
      'var(--elevation-1)'
    };
  }
`;

const ThemeToggle = styled(motion.button)`
  display: flex;
  justify-content: center;
  align-items: center;
  background: ${({ theme }) => theme.navBackground};
  border: 1px solid ${({ theme }) => theme.primary};
  border-radius: 50%;
  cursor: pointer;
  color: ${({ theme }) => theme.primary};
  width: 50px;
  height: 50px;
  position: fixed;
  top: 2rem;
  left: 2rem;
  z-index: 1000;
  backdrop-filter: blur(10px);
  box-shadow: 0 0 20px ${({ theme }) => `${theme.primary}33`};
  
  &:hover {
    background: ${({ theme }) => theme.cardBackground};
    box-shadow: 0 0 30px ${({ theme }) => `${theme.primary}4D`};
  }

  svg {
    width: 24px;
    height: 24px;
  }
`;

const MenuIcon = styled.div`
  width: 24px;
  height: 2px;
  background: ${({ isOpen, theme }) => (isOpen ? 'transparent' : theme.primary)};
  position: relative;
  transition: all 0.3s ease;

  &::before,
  &::after {
    content: '';
    position: absolute;
    width: 24px;
    height: 2px;
    background: ${({ theme }) => theme.primary};
    transition: all 0.3s ease;
  }

  &::before {
    transform: ${({ isOpen }) => (isOpen ? 'rotate(45deg)' : 'translateY(-8px)')};
  }

  &::after {
    transform: ${({ isOpen }) => (isOpen ? 'rotate(-45deg)' : 'translateY(8px)')};
  }
`;

const MenuOverlay = styled(motion.div)`
  position: fixed;
  top: 0;
  right: 0;
  width: 300px;
  height: 100vh;
  background: ${({ theme }) => theme.colors.navBackground};
  backdrop-filter: blur(${({ theme }) => theme.isDarkMode ? '10px' : '15px'});
  padding: 6rem 2rem 2rem;
  z-index: 999;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  transform-origin: right;
  box-shadow: ${({ theme }) => theme.isDarkMode ?
    '-10px 0 30px rgba(0, 0, 0, 0.2)' :
    'var(--elevation-3)'
  };
  transition: all var(--duration-medium) var(--easing-standard);
`;

const NavLinks = styled(motion.div)`
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  width: 100%;
`;

const NavLink = styled(motion.button)`
  color: ${({ theme }) => theme.colors.text};
  background: none;
  border: none;
  cursor: pointer;
  font-size: 1.1rem;
  padding: 1rem 1.25rem;
  position: relative;
  width: 100%;
  text-align: left;
  border-radius: ${({ theme }) => theme.isDarkMode ? '8px' : '12px'};
  transition: all var(--duration-medium) var(--easing-standard);

  &::before {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    padding: 2px;
    background: ${({ theme }) => theme.isDarkMode ?
      `linear-gradient(45deg, transparent, ${theme.colors.primary})` :
      'none'
    };
    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    opacity: 0;
    transition: opacity var(--duration-short) var(--easing-standard);
  }

  &:hover {
    background: ${({ theme }) => theme.isDarkMode ?
      `${theme.colors.primary}1A` :
      `${theme.colors.primary}10`
    };
    color: ${({ theme }) => theme.colors.primary};
    padding-left: 1.5rem;
    
    &::before {
      opacity: ${({ theme }) => theme.isDarkMode ? 1 : 0};
    }
  }

  &.active {
    color: ${({ theme }) => theme.colors.primary};
    background: ${({ theme }) => theme.isDarkMode ?
      `${theme.colors.primary}1A` :
      `${theme.colors.primary}15`
    };
    font-weight: 500;
    
    &::before {
      opacity: ${({ theme }) => theme.isDarkMode ? 1 : 0};
    }
  }
`;

const Navbar = () => {
  const [activeSection, setActiveSection] = useState('hero');
  const [isOpen, setIsOpen] = useState(false);
  const { isDarkMode, toggleTheme, colors: theme } = useTheme();

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  const menuVariants = {
    closed: {
      x: "100%",
      opacity: 0,
      transition: {
        type: "spring",
        stiffness: 400,
        damping: 40
      }
    },
    open: {
      x: 0,
      opacity: 1,
      transition: {
        type: "spring",
        stiffness: 400,
        damping: 40
      }
    }
  };

  const linkVariants = {
    closed: {
      x: 20,
      opacity: 0
    },
    open: i => ({
      x: 0,
      opacity: 1,
      transition: {
        delay: i * 0.1
      }
    })
  };

  useEffect(() => {
    const handleScroll = () => {
      const sections = ['hero', 'projects', 'experience', 'contact'];
      const scrollPosition = window.scrollY + window.innerHeight / 2;

      for (const section of sections) {
        const element = document.querySelector(`.${section}-section`);
        if (element) {
          const { top, bottom } = element.getBoundingClientRect();
          const elementPosition = window.scrollY + top;
          if (scrollPosition >= elementPosition && scrollPosition < elementPosition + bottom) {
            setActiveSection(section);
            break;
          }
        }
      }
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll();
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const scrollToSection = (sectionName) => {
    const section = document.querySelector(`.${sectionName}-section`);
    if (section) {
      const targetPosition = section.getBoundingClientRect().top + window.pageYOffset;
      window.scrollTo({
        top: targetPosition,
        behavior: 'smooth'
      });
      setIsOpen(false);
    }
  };

  return (
    <>
      <ThemeToggle
        onClick={toggleTheme}
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.95 }}
        aria-label="Toggle theme"
        theme={theme}
      >
        {isDarkMode ? (
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
          </svg>
        ) : (
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
          </svg>
        )}
      </ThemeToggle>

      <NavContainer theme={theme}>
        <MenuButton
          onClick={toggleMenu}
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.95 }}
          aria-label="Toggle menu"
          theme={theme}
        >
          <MenuIcon isOpen={isOpen} theme={theme} />
        </MenuButton>

        <AnimatePresence>
          {isOpen && (
            <MenuOverlay
              initial="closed"
              animate="open"
              exit="closed"
              variants={menuVariants}
              theme={theme}
            >              <NavLinks>
                {[
                  { name: 'hero', label: 'Home' },
                  { name: 'projects', label: 'Projects' },
                  { name: 'experience', label: 'Experience' },
                  { name: 'contact', label: 'Contact' }
                ].map((section, i) => (
                  <NavLink
                    key={section.name}
                    className={activeSection === section.name ? 'active' : ''}
                    onClick={() => scrollToSection(section.name)}
                    custom={i}
                    variants={linkVariants}
                    whileTap={{ scale: 0.95 }}
                    theme={theme}
                  >
                    {section.label}
                  </NavLink>
                ))}
              </NavLinks>
            </MenuOverlay>
          )}
        </AnimatePresence>
      </NavContainer>
    </>
  );
};

export default Navbar;
